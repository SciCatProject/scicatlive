{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SciCatLive","text":""},{"location":"#scicatlive","title":"SciCatLive","text":"<p>    Get set up with an instance of SciCat to explore the metadata catalog. SciCatlive provides a flexible and easy way to learn about SciCat and its features for people who are looking to integrate SciCat into their environment. For a user guide please see         original documentation        .   </p> <p>    This project requires docker and docker compose. The docker version must be later than 2.29.0 to support this project.   </p>"},{"location":"#first-stable-version","title":"First stable version","text":"<p>    Release    <code>     v3.0    </code>    is the first stable and reviewed version of SciCatLive.   </p>"},{"location":"#steps","title":"Steps","text":"Windows specific instructions (click to expand)     <p>      Running this project on Windows is not officialy supported, you should use Windows Subsystem for Linux (WSL).    </p> <p>     However, if you want to run it on Windows you have to be careful about: - This project makes use of symbolic links, Windows and git for Windows have to be           configured to handle them          . - End of lines, specifically in shell scripts. If you have the git config parameter     <code>      auto.crlf     </code>     set to     <code>      true     </code>     , git will replace LF by CRLF causing shell scripts and maybe other things to fail. - This project uses the variable     <code>      ${PWD}     </code>     to ease path resolution in bind mounts. In PowerShell/Command Prompt, the     <code>      PWD     </code>     environment variable doesn't exist so you would need to set in manually before running any     <code>      docker compose     </code>     command.    </p> <p> </p> <ol> <li>     Clone the repository      <pre><code>git clone https://github.com/SciCatProject/scicatlive.git\n</code></pre> </li> <li>     Run with the following command inside the directory      <pre><code>docker compose up -d\n</code></pre> </li> </ol>"},{"location":"#default-setup","title":"Default setup","text":"<p>    By running    <code>     docker compose up -d    </code>    these steps take place:   </p> <ol> <li>     a           mongodb          container is created with some initial data.    </li> <li>     the SciCat           backend v4          container is created and connected to (1).    </li> <li>     the SciCat           frontend          container is created and connected to (2).    </li> <li>     a reverse           proxy          container is created and routes traffic to (2) and (3) through localhost subdomains, in the form:     <code>      http://${service}.localhost     </code>     . The frontend is available at simply     <code>      http://localhost     </code>     .    </li> <li>     Some services have additional endpoints that can be explored in SciCatLive which would follow     <code>      http://${service}.localhost/${prefix}     </code>     . For example, the backend API can be explored through a Swagger UI at     <code>      http://backend.localhost/explorer     </code>     .  For more information on the paths used by these routes see the original documentation for these services.    </li> </ol>"},{"location":"#extra-services-and-features","title":"Extra services and features","text":"<p>    SciCat has extra features as part of its core as well as integrating with external services.   </p> <p>    SciCat features that extend the backend are:   </p> <ul> <li>     Jobs - this mechanism posts to a           message broker          , which can then trigger           down stream processes          . To use this a RabbitMQ server is enabled.    </li> <li>       Elasticsearch          - creates an elasticsearch service to provide full text search in the backend.    </li> </ul> <p>    Services that can be integrated with SciCat are:   </p> <ul> <li>       LDAP          - authentication and authorization from an LDAP server    </li> <li>       OIDC          - authentication and authorization using an OIDC provider    </li> <li>       SearchAPI          - for better free text search in the metadata based on the PANOSC           search-api      </li> <li>       LandingPage          - a public interface for published datasets           landingpage      </li> <li>       JupyterHub          - Adds an instance of JupyterHub which demonstrates ingestion and extraction of metadata using           pyscicat          .    </li> </ul> <p>    To enable extra services configure them by:   </p> <ol> <li>     setting           docker compose env variables      </li> <li>     using           docker compose profiles      </li> <li>     modifying the           service-specific config      </li> <li>     adding           entrypoints      </li> </ol>"},{"location":"#dependencies","title":"Dependencies","text":"<p>    Here below we show the dependencies, including the ones of the         extra services        (if    <code>     B    </code>    depends on    <code>     A    </code>    , then we visualize it as    <code>     A --&gt; B    </code>    ):   </p> <pre><code>graph TD\n   subgraph services\n      subgraph backend\n         backends[v3*/v4*]\n      end\n      mongodb --&gt; backend\n      backend --&gt; frontend\n      backend --&gt; searchapi\n      backend --&gt; landingpage\n      backend --&gt; jupyter\n   end\n\n   proxy -.- services\n\n   %% CSS Styling\n   linkStyle 5 marker-end:none</code></pre> <p>    We flag with    <code>     *    </code>    the services which have extra internal dependencies, which are not shared.   </p>"},{"location":"#select-the-services","title":"Select the services","text":"<p>    The user can selectively decide the containers to spin up and the dependencies will be resolved accordingly. The available services are in the         services        folder and are called consistently.   </p> <p>    For example, one could decide to only run the    <code>     backend    </code>    by running (be aware that this will not run the    <code>     proxy    </code>    , so the service will not be available at    <code>     backend.localhost    </code>    ):   </p> <pre><code>docker compose up -d backend\n</code></pre> <p>    (or a list of services, for example, with the proxy    <code>     docker compose up -d backend proxy    </code>    )   </p> <p>    This will run, from the         previous section        , (1) and (2) but skip the rest.   </p>      Accordingly (click to expand)...     <pre><code>docker compose up -d frontend\n</code></pre> <p>     Will run, from the           previous section          , (1), (2) and (4) but skip (5).    </p> <p>     And    </p> <pre><code>docker compose --profile search up -d searchapi\n</code></pre> <p>     Will run, from the           previous section          , (1) and (2), skip (3) and (4), and add the     <code>      searchapi     </code>     service.    </p> <p>    Make sure to check the         backend compatibility        when choosing services and setting    <code>     docker compose env vars and profiles    </code>    .   </p>"},{"location":"#docker-compose-env-variables","title":"Docker compose env variables","text":"<p>    They are used to modify existing services where whenever enabling the feature requires changes in multiple services. They also have the advantage, compared to docker profiles, of not needing to define a new profile when a new combination of features becomes available. To set an env variable for docker compose, either assign it in the shell or change the         .env        file. To later unset it, either unset it from the shell or assign it an empty value, either in the shell or in the         .env        file.   </p> <p>    For example, to use the Jobs functionality of SciCat change    <code>     JOBS_ENABLED    </code>    to true before running your    <code>     docker compose    </code>    command or simply export it in the shell. For all env configuration options see         here     </p>"},{"location":"#docker-compose-profiles","title":"Docker compose profiles","text":"<p>    They are used when adding new services or grouping services together (and do not require changes in multiple services). To enable any, run    <code>     docker compose --profile &lt;PROFILE&gt; up -d    </code>    , or export the    <code>     COMPOSE_PROFILES    </code>    env variable as described         here        . If needed, the user can specify more than one profile in the CLI by using the flag as    <code>     --profile &lt;PROFILE1&gt; --profile &lt;PROFILE2&gt;    </code>    .   </p> <p>    For example    <code>     docker compose --profile analysis    </code>    sets up a jupyter hub with some notebooks for ingesting data into SciCat, as well as the related services (backend, mongodb, proxy). For more information on profiles available in SciCat live see the following         table        .   </p>"},{"location":"#docker-compose-profiles-and-env-variables-configuration-options","title":"Docker compose profiles and env variables configuration options","text":"Type              Env key              Value: Service/Feature              Default              Backend Compatibility              Description              Other impacted services              profile       <code>        COMPOSE_PROFILES       </code> <li> <code>         analysis        </code>        : jupyter       </li> <li> <code>         search        </code>        : searchapi,landingpage       </li> <li> <code>         '*'        </code>        : jupyter,searchapi,landingpage       </li> <code>        ''       </code>        *       <li>        analysis: enables additional jupyter notebook with python SciCat SDK installed and example notebooks       </li> <li>        search: enables a SciCat interface for standardized search and a public interface for published datasets       </li>        env       <code>        BE_VERSION       </code> <li> <code>         v3        </code>        : backend/v3       </li> <li> <code>         v4        </code>        : backend/v4       </li> <code>        v4       </code>        as set              Sets the BE version to use in (2) of               default setup              to v3              mongodb,frontend              env       <code>        JOBS_ENABLED       </code> <code>        true       </code>       : rabbitmq,archivemock,jobs feature       <code>        ''       </code>        v3              Creates a RabbitMQ message broker which the BE posts to and the archivemock listens to. It emulates the data long-term archive/retrieve workflow              env       <code>        ELASTIC_ENABLED       </code> <code>        true       </code>       : elastic,elastic feature       <code>        ''       </code>        v4              Creates an elastic search service and sets the BE to use it for full-text searches              env       <code>        LDAP_ENABLED       </code> <code>        true       </code>       : ldap auth       <code>        ''       </code>        *              Creates an LDAP service and sets the BE to use it as authentication backend              env       <code>        OIDC_ENABLED       </code> <code>        true       </code>       : oidc auth       <code>        ''       </code>        *              Creates an OIDC identity provider and sets the BE to use it as authentication backend              env       <code>        DEV       </code> <code>        true       </code>       : backend,frontend,searchapi,archivemock in DEV mode       <code>        ''       </code>        *              The SciCat services' environment is prepared to ease the               development in a standardized environment               env       <code>        &lt;SERVICE&gt;_HTTPS_URL       </code> <code>        &lt;URL&gt;       </code>       : HTTPS termination       <code>        ''       </code>        *              Requests the TLS certificate for the URL to LetsEncrypt through the               proxy        <p>    After optionally setting any configuration option, one can still select the services to run as described         here        .   </p>"},{"location":"#dev-configuration","title":"DEV configuration","text":"(click to expand)     <p>     To provide a consistent environment where developers can work, the     <code>      DEV=true     </code>     option creates the SciCat services (see DEV from           here          for the list), but instead of running them, it just creates the base environment that each service requires. For example, for the     <code>      backend     </code>     , instead of running the web server, it creates a NODE environment with     <code>      git     </code>     where one can develop and run the unit tests. This is useful as often differences in environments create collaboration problems. It should also provide an example of the configuration for running tests. Please refer to the services' README for additional information, or to the Dockerfile     <code>      CMD     </code>     of the components' GitHub repo if not specified otherwise. The     <code>      DEV=true     </code>     affects the SciCat services only.    </p> <p>     Please be patient when using DEV as each container runs unit tests as part of the init, which might take a little to finish. This is done to test the compatibility of upstream/latest with the     <code>      docker compose     </code>     (see warning). To see if any special precaution is required to run the tests, refer to the     <code>      entrypoints/tests.sh     </code>     mounted by the volumes. To disable test execution, just comment the     <code>      entrypoints/tests.sh     </code>     mount on the respective service.    </p> <p>     It is very convenient if using           VSCode          , as, after the docker services are running, one can attach to it and start developing using all VSCode features, including version control and debugging.    </p> <p>      To prevent git unpushed changes from being lost when a container is restarted, the work folder of each service, when in DEV mode, is mounted to a docker volume, with naming convention     <code>      ${COMPOSE_PROJECT_NAME}_&lt;service&gt;_dev     </code>     . Make sure, before removing docker volumes to push the relevant changes.    </p> <p>      As the DEV containers pull from upstream/latest, there is no guarantee of their functioning outside of releases. If they fail to start, try, as a first option, to build the image from a tag (e.g.           build context          ) using the           TAG          and then git checkout to that tag (e.g. set           GITHUB_REPO          including the branch using the same syntax and value as the build context).    </p> <p>     e.g., for the frontend:    </p> <pre><code>   build:\n-     context: https://github.com/SciCatProject/frontend.git\n+     context: https://github.com/SciCatProject/frontend.git#v4.4.1\n   environment:\n-     GITHUB_REPO: https://github.com/SciCatProject/frontend.git\n+     GITHUB_REPO: https://github.com/SciCatProject/frontend.git#v4.4.1\n</code></pre> <p>     If you did not remove the volume, specified a new branch, and had any uncommited changes, they will be stashed to checkout to the selected branch. You can later reapply them by     <code>      git stash apply     </code>     .    </p>"},{"location":"#tls-configuration","title":"TLS configuration","text":"<p>    You can enable TLS termination of desired services by setting the    <code>     &lt;SERVICE&gt;_HTTPS_URL    </code>    , by setting the full URL, including    <code>     https://    </code>    . The specified HTTPS URL will get a    <code>     letsencrypt    </code>    generated certificate through the proxy setting. For more details see the         proxy instructions        . After setting some URLs, the required changes in dependent services are automatically resolved, as explained for example         here        . Whenever possible, we use either the docker internal network or the localhost subdomains.   </p> <p>     Please make sure to set all required    <code>     &lt;SERVICE&gt;_HTTPS_URL    </code>    whenever enabling one, as mixing public URLs and    <code>     localhost    </code>    ones might be tricky. See, for example, what is described in the         frontend documentation        and the         backend documentation        .   </p>"},{"location":"#service-specific-config","title":"Service-specific config","text":"<p>    It can be changed whenever needing to configure a service independently from the others.   </p> <p>    Every service folder (inside the         services        parent directory) contains its configuration and some instructions, at least for the non-third-party containers.   </p> <p>    For example, to configure the         frontend        , the user can change any file in the         frontend config        folder, for which instructions are available in the         README        file.   </p> <p>    After any configuration change,    <code>     docker compose up -d    </code>    must be rerun, to allow loading the changes.   </p>"},{"location":"#entrypoints","title":"Entrypoints","text":"<p>    Sometimes, it is useful to run init scripts (entrypoints) before the service starts. For example, for the    <code>     frontend    </code>    composability, it is useful to specify its configuration through multiple JSON files, with different scopes, which are then merged by a         init script        . For this reason, one can define         common entrypoints        and service-specific ones (e.g.         backend v4 ones        ) which can be run inside the container, before the service starts (i.e. before the docker compose    <code>     command    </code>    is executed). Whenever these entrypoints are shared between services, it is recommended to place them in an    <code>     entrypoints    </code>    folder below the outermost service (e.g.         this one        ).   </p> <p>    To ease the iterative execution of multiple init scripts, one can leverage the         loop_entrypoints        utility, which loops alphabetically over    <code>     /docker-entrypoinst/*.sh    </code>    and executes each. This is in use in some services (e.g. in the         frontend        ), so one can add additional init steps by mounting them, one by one, as volumes inside the container in the    <code>     /docker-entrypoints    </code>    folder and naming them depending on the desired order (eventually rename the existing ones as well).   </p>"},{"location":"#if-the-service-does-not-support-entrypoints-yet-one-needs-to","title":"If the service does not support entrypoints yet, one needs to:","text":"(click to expand):     <ol> <li>      mount the             loop_entrypoint.sh            as a volume inside the container     </li> <li>      mount any service-specific init script as a volume in the container in the folder      <code>       /docker-entrypoints/*.sh      </code>      , naming them sequentially, depending on the desired execution order     </li> <li>      override the      <code>       entrypoint      </code>      field in the service     </li> <li>      specify the service      <code>       command      </code> </li> </ol> <p>     See for example           here          .    </p>"},{"location":"#add-a-new-service","title":"Add a new service","text":"<p>    Please note that services should, in general, be defined by their responsibility, rather than by their underlying technology, and should be named so.   </p>"},{"location":"#basic","title":"Basic","text":"<p>    To add a new service (see the         jupyter service        for a minimal example):   </p> <ol> <li>     create a dedicated folder in the           services          one *    </li> <li>     name it as the service    </li> <li>     create the     <code>      compose.yaml     </code>     file    </li> <li>     eventually, add a     <code>      README.md     </code>     file in the service    </li> <li>     eventually, add the platform field, as described           here      </li> <li>     include the reference to (3) to the global           compose include list          *    </li> <li>     eventually, update the main           README.md      </li> </ol> <p>    * if the service to add is not shared globally, but specific to one particular service or another implementation of the same component, add it to the    <code>     services    </code>    folder relative to the affected service, and in (6) add it to its inclusion list. See an example of a service relative         services folder here        and a         relative inclusion list here        .   </p>"},{"location":"#supported-os-architectures","title":"Supported OS architectures","text":"<p>    Since some images are not built with multi-arch, in particular the SciCat ones, make sure to specify the platform of the service in the compose, when needed, to avoid possible issues when running    <code>     docker compose up    </code>    on different platforms, for example on MAC with arm64 architecture. See for example the         searchapi compose        .   </p>"},{"location":"#advanced","title":"Advanced","text":"(click to expand)     <p>     To add a new service, with advanced configuration (see the           backend          for an extensive example, or/and this           PR          which added the           landingpage          ):    </p> <ol> <li>      follow the steps from the             basic section       </li> <li>      eventually, include any service, in the service-specific folder which is specific to the service and not shared by other, more general services, e.g.             here            . This folder should also include different versions of the same service, e.g. v3 and v4             here       </li> <li> <p>       eventually, if the service supports               ENVs              , leverage the               include override              feature from docker compose. For this:      </p> <ol> <li>        create a        <code>         compose.base.yaml        </code>        file, e.g.                 here                , which should contain the        <code>         base        </code>        configuration, i.e. the one where all ENVs are unset, i.e. the features are disabled       </li> <li>        create the ENV-specific (e.g.        <code>         ELASTIC_ENABLED        </code>        )        <code>         compose.&lt;ENV&gt;.yaml        </code>        file, e.g.                 backend v4 compose.elastic.yaml                , with the additional/override config, specific to the enabled feature       </li> <li>        create a symlink from                 .empty.yaml                to each        <code>         .compose.&lt;ENV&gt;.yaml        </code>        , e.g.                 here                . This is used whenever the        <code>         ENV        </code>        is unset, as described in the next step       </li> <li>        use        <code>         compose.yaml        </code>        to merge the        <code>         compose*.yaml        </code>        files together, making sure to default to        <code>         .compose.&lt;ENV&gt;.yaml        </code>        whenever the        <code>         ENV        </code>        is not set. See an example                 here         </li> <li>        if the service is another version of an existing one, e.g. v3 and v4 versions of the        <code>         backend        </code>        service, add the selective include in the parent compose.yaml, e.g.                 here         </li> <li>        eventually, modify the                 compose workflow                to add the toggle to the matrix. If the toggle depends on the changed files, remember to create the toggle configuration                 here                and create the                 exclude                rule in the workflow.       </li> </ol> </li> <li> <p>       eventually, add entrypoints for init logics, as described               here              , e.g. like               here              , including any               ENVs              specific logic. Remember to set the environment variable in the compose.yaml file.      </p> </li> </ol>"},{"location":"#general-use-of-scicat","title":"General use of SciCat","text":"<p>    To use SciCat, please refer to the         original documentation        .   </p>"}]}