#################
# glauth.conf

#################
# General configuration.
debug = true
# syslog = true
# structuredlog = true
#
# Enable hot-reload of configuration on changes
# - does NOT work [ldap], [ldaps], [backend] or [api] sections
watchconfig = true

#################
# yubikeyclientid = "yubi-api-clientid"
# yubikeysecret = "yubi-api-secret"

#################
# Server configuration.
[ldap]
  enabled = true
  # run on a non privileged port
  listen = "0.0.0.0:3893"
  tls = false # enable StartTLS support
  tlsCertPath = "glauth.crt"
  tlsKeyPath = "glauth.key"

[ldaps]
# to enable ldaps generate a certificate, eg. with:
# openssl req -x509 -newkey rsa:4096 -keyout glauth.key -out glauth.crt -days 365 -nodes -subj '/CN=`hostname`'
  enabled = false
  listen = "0.0.0.0:3894"
  cert = "glauth.crt"
  key = "glauth.key"

#################
# Tracing section controls the tracer configuration
[tracing]
  # if enabled is set to false, a no-op tracer will be used
  enabled = false
  # if both grpcEndpoint and httpEndpoint are unset, the default stdout provider will be used
  # TODO add allowGRPCInsecure: right now grpc otlp is using the WithInsecure flag so traffic
  # will always go without verifying server certificates
  # grpcEndpoint = "otlp.monitoring.io:4317"
  # httpEndpoint = "http://otlp.monitoring.io:4318"
#################
# The backend section controls the data store.
[backend]
  datastore = "config"
  baseDN = "dc=facility"

  # If you are using a client that requires reading the root DSE first
  # such as SSSD
  anonymousdse = false

  ## Configure dn format to use structures like 
  ## "uid=serviceuser,cn=svcaccts,$BASEDN" instead of "cn=serviceuser,ou=svcaccts,$BASEDN"
  ## to help ease migrations from other LDAP systems
  # nameformat = "uid"
  # groupformat = "cn"

  ## Configure ssh-key attribute name, default is 'sshPublicKey'
  # sshkeyattr = "ipaSshPubKey"

[behaviors]
  # Ignore all capabilities restrictions, for instance allowing every user to perform a search
  IgnoreCapabilities = false
  # Enable a "fail2ban" type backoff mechanism temporarily banning repeated failed login attempts
  LimitFailedBinds = true
  # How many failed login attempts are allowed before a ban is imposed
  NumberOfFailedBinds = 3
  # How long (in seconds) is the window for failed login attempts
  PeriodOfFailedBinds = 10
  # How long (in seconds) is the ban duration
  BlockFailedBindsFor = 60
  # Clean learnt IP addresses every N seconds
  PruneSourceTableEvery = 600
  # Clean learnt IP addresses not seen in N seconds
  PruneSourcesOlderThan = 600

#################
# The users section contains a hardcoded list of valid users.
#   to create a passSHA256:   echo -n "mysecret" | openssl dgst -sha256
[[users]]
  name = "ldap-user"
  uidnumber = 5001
  primarygroup = 5501
  mail = "ldap-user@facility.com"
  passsha256 = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8" # password
    [[users.customattributes]]
    displayName = ["LDAP User"]

[[users]]
  name = "scicatlive-svc"
  mail = "scicatlive.svc@facility.com"
  uidnumber = 5002
  primarygroup = 5502
  passsha256 = "652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0" # mysecret
    [[users.capabilities]]
    action = "search"
    object = "*"

#################
# The groups section contains a hardcoded list of valid users.
[[groups]]
  name = "scicatlive"
  gidnumber = 5501

[[groups]]
  name = "svc-acc"
  gidnumber = 5502

#################
# Enable and configure the optional REST API here.
[api]
  enabled = true
  internals = true # debug application performance
  tls = false # enable TLS for production!!
  listen = "0.0.0.0:5555"
  cert = "cert.pem"
  key = "key.pem"